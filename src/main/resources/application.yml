spring:
  servlet:
    multipart:
      # 업로드 가능한 파일과 요청을 2024MB로 제한한다.
      max-file-size: 2048MB
      max-request-size: 2048MB

  # DataBase 설정을 간단하게 하기 위해 H2 인메모리 DB를 사용한다.
  datasource:
    url: jdbc:h2:mem:file
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:test}
    driver-class-name: org.h2.Driver

  # H2 콘솔을 사용한다.
  h2:
    console:
      enabled: true
      path: /h2-console

  jpa:
    hibernate:
#      naming:
#        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      # 애플리케이션을 시작하면 자동으로 테이블을 생성한다.
      ddl-auto: create
    open-in-view: false
#    show-sql: true
    database-platform: org.hibernate.dialect.H2Dialect

# JWT 설정
jwt:
  # JWT의 비밀키
  secret: ${JWT_SECRET_KEY:zrGwAiwkl9jUN4aIxXa8KluPljl9eX0qKfpTgYT1OKIlZLOIf5L0jPSN9pjc0sJ1d5r1xGJCuLJu6u8K2BlSKTNhY7liEgbGCJnz10y3Z3IItlsO0pJjIhPTgMvQ95Iki2oVx4fbBMY6fBD33WungyCmcOYsBdk1IAABl1qn6E6LgmEJoOv8Z83SRb3PmlCO}
  expire:
    # JWT의 유효 기간
    # 5분 (1000 * 60 * 5 = 300000) / 30분 (1000 * 60 * 30 = 1800000) / 1시간 (1000 * 60 * 60 = 3600000)
    access: ${JWT_EXPIRE_TIME:1800000}

server:
  forward-headers-strategy: native # HttpServletRequest.getRemoteAddr()을 사용하여 X-Forwarded-For를 사용하도록 설정
  servlet:
    context-path: /dau/api

service:
  # 초기 사용자 지정
  init-user:
    id: test-user
    pw: test-password
  allowed-ips: ${ALLOWED_IPS:127.0.0.1, 172.17.0.0/16} # 접근을 허용하는 IP를 지정한다. ex: 197.0.10.211, 197.0.10.24
  rate-limit:
    init-bucket-size: ${RATE_LIMIT_BUCKET_SIZE:20} # Token을 담는 Bucket의 크기 (초기 Token의 개수)
    refill-second: ${RATE_LIMIT_REFILL_SECOND:60} # Token을 다시 채우는데 걸리는 시간 (Greedy 정책 사용)
    refill-token: ${RATE_LIMIT_REFILL_TOKEN:10} # Token이 채워지는 개수
  file-write-scheduler:
    cron: 0 0 0 * * * # 파일을 읽어서 DB에 쓰는 스케쥴러의 실행 crontab
    file-directory: ${WRITE_FILE_DIRECTORY:/home/sky114z/private-study/file/files} # 파일의 경로
